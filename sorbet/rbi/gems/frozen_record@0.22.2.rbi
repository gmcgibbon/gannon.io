# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `frozen_record` gem.
# Please instead update this file by running `bin/tapioca gem frozen_record`.

# source://frozen_record//lib/frozen_record/version.rb#3
module FrozenRecord
  class << self
    # Returns the value of attribute deprecated_yaml_erb_backend.
    #
    # source://frozen_record//lib/frozen_record/minimal.rb#19
    def deprecated_yaml_erb_backend; end

    # Sets the attribute deprecated_yaml_erb_backend
    #
    # @param value the value to set the attribute deprecated_yaml_erb_backend to.
    #
    # source://frozen_record//lib/frozen_record/minimal.rb#19
    def deprecated_yaml_erb_backend=(_arg0); end

    # source://frozen_record//lib/frozen_record/minimal.rb#21
    def eager_load!; end
  end
end

# source://frozen_record//lib/frozen_record/backends.rb#4
module FrozenRecord::Backends; end

# source://frozen_record//lib/frozen_record/backends/json.rb#6
module FrozenRecord::Backends::Json
  extend ::FrozenRecord::Backends::Json

  # source://frozen_record//lib/frozen_record/backends/json.rb#9
  def filename(model_name); end

  # source://frozen_record//lib/frozen_record/backends/json.rb#21
  def load(file_path); end
end

# source://frozen_record//lib/frozen_record/backends/yaml.rb#5
module FrozenRecord::Backends::Yaml
  extend ::FrozenRecord::Backends::Yaml

  # Transforms the model name into a valid filename.
  #
  # @param format [String] the model name that inherits
  #   from FrozenRecord::Base
  # @return [String] the file name.
  #
  # source://frozen_record//lib/frozen_record/backends/yaml.rb#15
  def filename(model_name); end

  # Reads file in `file_path` and return records.
  #
  # @param format [String] the file path
  # @return [Array] an Array of Hash objects with keys being attributes.
  #
  # source://frozen_record//lib/frozen_record/backends/yaml.rb#23
  def load(file_path); end

  private

  # source://frozen_record//lib/frozen_record/backends/yaml.rb#58
  def load_file(path); end

  # source://frozen_record//lib/frozen_record/backends/yaml.rb#62
  def load_string(yaml); end
end

# source://frozen_record//lib/frozen_record/base.rb#7
class FrozenRecord::Base
  include ::ActiveModel::Conversion
  include ::ActiveModel::AttributeMethods
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods

  # @return [Base] a new instance of Base
  #
  # source://frozen_record//lib/frozen_record/base.rb#213
  def initialize(attrs = T.unsafe(nil)); end

  # source://frozen_record//lib/frozen_record/base.rb#230
  def ==(other); end

  # source://frozen_record//lib/frozen_record/base.rb#225
  def [](attr); end

  # source://frozen_record//lib/frozen_record/base.rb#225
  def attribute(attr); end

  # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#72
  def attribute_aliases; end

  # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#72
  def attribute_aliases?; end

  # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#73
  def attribute_method_patterns; end

  # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#73
  def attribute_method_patterns?; end

  # source://frozen_record//lib/frozen_record/base.rb#217
  def attributes; end

  # source://frozen_record//lib/frozen_record/base.rb#221
  def id; end

  # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/serializers/json.rb#15
  def include_root_in_json; end

  # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/serializers/json.rb#15
  def include_root_in_json?; end

  # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/naming.rb#255
  def model_name(&block); end

  # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/conversion.rb#32
  def param_delimiter=(_arg0); end

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/base.rb#234
  def persisted?; end

  # source://frozen_record//lib/frozen_record/base.rb#238
  def to_key; end

  private

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/base.rb#244
  def attribute?(attribute_name); end

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/base.rb#248
  def attribute_method?(attribute_name); end

  class << self
    # Returns the value of attribute abstract_class.
    #
    # source://frozen_record//lib/frozen_record/base.rb#64
    def abstract_class; end

    # Sets the attribute abstract_class
    #
    # @param value the value to set the attribute abstract_class to.
    #
    # source://frozen_record//lib/frozen_record/base.rb#64
    def abstract_class=(_arg0); end

    # @return [Boolean]
    #
    # source://frozen_record//lib/frozen_record/base.rb#73
    def abstract_class?; end

    # source://frozen_record//lib/frozen_record/base.rb#102
    def add_index(attribute, unique: T.unsafe(nil)); end

    # source://frozen_record//lib/frozen_record/base.rb#77
    def all; end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#72
    def attribute_aliases; end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#72
    def attribute_aliases=(value); end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#72
    def attribute_aliases?; end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#73
    def attribute_method_patterns; end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#73
    def attribute_method_patterns=(value); end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/attribute_methods.rb#73
    def attribute_method_patterns?; end

    # source://frozen_record//lib/frozen_record/base.rb#66
    def attributes; end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def auto_reloading; end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def auto_reloading=(value); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def auto_reloading?; end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def average(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def backend; end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def backend=(value); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def backend?; end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def base_path; end

    # source://frozen_record//lib/frozen_record/base.rb#59
    def base_path=(base_path); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def base_path?; end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def count(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#77
    def current_scope; end

    # source://frozen_record//lib/frozen_record/base.rb#82
    def current_scope=(scope); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def default_attributes; end

    # source://frozen_record//lib/frozen_record/base.rb#47
    def default_attributes=(default_attributes); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def default_attributes?; end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def each(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#129
    def eager_load!; end

    # @raise [ArgumentError]
    #
    # source://frozen_record//lib/frozen_record/base.rb#90
    def file_path; end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def find(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def find_by(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def find_by!(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def find_by_id(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def find_each(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def first(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def first!(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def ids(*_arg0, **_arg1, &_arg2); end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/serializers/json.rb#15
    def include_root_in_json; end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/serializers/json.rb#15
    def include_root_in_json=(value); end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/serializers/json.rb#15
    def include_root_in_json?; end

    # source://frozen_record//lib/frozen_record/base.rb#17
    def index_definitions; end

    # source://frozen_record//lib/frozen_record/base.rb#17
    def index_definitions=(value); end

    # source://frozen_record//lib/frozen_record/base.rb#17
    def index_definitions?; end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def last(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def last!(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def limit(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#135
    def load_records(force: T.unsafe(nil)); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def maximum(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#107
    def memsize(object = T.unsafe(nil), seen = T.unsafe(nil)); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def minimum(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#161
    def new(attrs = T.unsafe(nil)); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def offset(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def order(*_arg0, **_arg1, &_arg2); end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/conversion.rb#32
    def param_delimiter; end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/conversion.rb#32
    def param_delimiter=(value); end

    # source://activemodel/7.2.0.alpha-b1d57fb8c87d771d9a74ac31cd9969e6806b03b2/lib/active_model/conversion.rb#32
    def param_delimiter?; end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def pluck(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def primary_key; end

    # source://frozen_record//lib/frozen_record/base.rb#53
    def primary_key=(primary_key); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def primary_key?; end

    # @return [Boolean]
    #
    # source://frozen_record//lib/frozen_record/base.rb#122
    def respond_to_missing?(name, *_arg1); end

    # source://frozen_record//lib/frozen_record/base.rb#154
    def scope(name, body); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def sum(*_arg0, **_arg1, &_arg2); end

    # source://frozen_record//lib/frozen_record/base.rb#86
    def where(*_arg0, **_arg1, &_arg2); end

    private

    # source://frozen_record//lib/frozen_record/base.rb#177
    def assign_defaults!(record); end

    # source://frozen_record//lib/frozen_record/base.rb#196
    def dynamic_match(expression, values, bang); end

    # @return [Boolean]
    #
    # source://frozen_record//lib/frozen_record/base.rb#167
    def file_changed?; end

    # source://frozen_record//lib/frozen_record/base.rb#201
    def list_attributes(records); end

    def load(*_arg0); end

    # source://frozen_record//lib/frozen_record/base.rb#189
    def method_missing(name, *args); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def set_base_path(value); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def set_default_attributes(value); end

    # source://frozen_record//lib/frozen_record/base.rb#16
    def set_primary_key(value); end

    # source://frozen_record//lib/frozen_record/base.rb#173
    def store; end
  end
end

# source://frozen_record//lib/frozen_record/base.rb#14
FrozenRecord::Base::FALSY_VALUES = T.let(T.unsafe(nil), Set)

# source://frozen_record//lib/frozen_record/base.rb#13
FrozenRecord::Base::FIND_BY_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://frozen_record//lib/frozen_record/base.rb#26
class FrozenRecord::Base::ThreadSafeStorage
  # @return [ThreadSafeStorage] a new instance of ThreadSafeStorage
  #
  # source://frozen_record//lib/frozen_record/base.rb#28
  def initialize(key); end

  # source://frozen_record//lib/frozen_record/base.rb#32
  def [](key); end

  # source://frozen_record//lib/frozen_record/base.rb#37
  def []=(key, value); end
end

# source://frozen_record//lib/frozen_record/compact.rb#4
module FrozenRecord::Compact
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::FrozenRecord::Compact::ClassMethods

  # source://frozen_record//lib/frozen_record/compact.rb#45
  def initialize(attrs = T.unsafe(nil)); end

  # source://frozen_record//lib/frozen_record/compact.rb#55
  def [](attr); end

  # source://frozen_record//lib/frozen_record/compact.rb#49
  def attributes; end

  private

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/compact.rb#69
  def attribute?(attribute_name); end

  # source://frozen_record//lib/frozen_record/compact.rb#63
  def attributes=(attributes); end
end

# source://frozen_record//lib/frozen_record/compact.rb#7
module FrozenRecord::Compact::ClassMethods
  # Returns the value of attribute _attributes_cache.
  #
  # source://frozen_record//lib/frozen_record/compact.rb#32
  def _attributes_cache; end

  # source://frozen_record//lib/frozen_record/compact.rb#28
  def define_method_attribute(attr, **_arg1); end

  # source://frozen_record//lib/frozen_record/compact.rb#8
  def load_records(force: T.unsafe(nil)); end

  private

  # source://frozen_record//lib/frozen_record/compact.rb#36
  def build_attributes_cache; end
end

# source://frozen_record//lib/frozen_record/index.rb#4
class FrozenRecord::Index
  # @return [Index] a new instance of Index
  #
  # source://frozen_record//lib/frozen_record/index.rb#12
  def initialize(model, attribute, unique: T.unsafe(nil)); end

  # Returns the value of attribute attribute.
  #
  # source://frozen_record//lib/frozen_record/index.rb#10
  def attribute; end

  # source://frozen_record//lib/frozen_record/index.rb#42
  def build(records); end

  # source://frozen_record//lib/frozen_record/index.rb#34
  def lookup(value); end

  # source://frozen_record//lib/frozen_record/index.rb#30
  def lookup_multi(values); end

  # Returns the value of attribute model.
  #
  # source://frozen_record//lib/frozen_record/index.rb#10
  def model; end

  # source://frozen_record//lib/frozen_record/index.rb#22
  def query(matcher); end

  # source://frozen_record//lib/frozen_record/index.rb#38
  def reset; end

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/index.rb#18
  def unique?; end
end

# source://frozen_record//lib/frozen_record/index.rb#8
class FrozenRecord::Index::AttributeNonUnique < StandardError; end

# source://frozen_record//lib/frozen_record/index.rb#5
FrozenRecord::Index::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

# source://frozen_record//lib/frozen_record/railtie.rb#4
class FrozenRecord::Railtie < Rails::Railtie; end

# source://frozen_record//lib/frozen_record/minimal.rb#16
class FrozenRecord::RecordNotFound < StandardError; end

# source://frozen_record//lib/frozen_record/scope.rb#4
class FrozenRecord::Scope
  # @return [Scope] a new instance of Scope
  #
  # source://frozen_record//lib/frozen_record/scope.rb#27
  def initialize(klass); end

  # source://frozen_record//lib/frozen_record/scope.rb#132
  def ==(other); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def all?(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def as_json(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#84
  def average(attribute); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def collect(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def count(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def each(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#96
  def exists?; end

  # @raise [RecordNotFound]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#40
  def find(id); end

  # source://frozen_record//lib/frozen_record/scope.rb#45
  def find_by(criterias); end

  # source://frozen_record//lib/frozen_record/scope.rb#49
  def find_by!(criterias); end

  # source://frozen_record//lib/frozen_record/scope.rb#36
  def find_by_id(id); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def find_each(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def first(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#53
  def first!; end

  # source://frozen_record//lib/frozen_record/scope.rb#128
  def hash; end

  # source://frozen_record//lib/frozen_record/scope.rb#76
  def ids; end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def include?(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def last(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#57
  def last!; end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def length(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#116
  def limit(amount); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def map(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#92
  def maximum(attribute); end

  # source://frozen_record//lib/frozen_record/scope.rb#88
  def minimum(attribute); end

  # source://frozen_record//lib/frozen_record/scope.rb#120
  def offset(amount); end

  # source://frozen_record//lib/frozen_record/scope.rb#112
  def order(*ordering); end

  # source://frozen_record//lib/frozen_record/scope.rb#65
  def pluck(*attributes); end

  # source://frozen_record//lib/frozen_record/scope.rb#80
  def sum(attribute); end

  # source://frozen_record//lib/frozen_record/scope.rb#61
  def to_a; end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def to_ary(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#11
  def to_json(*_arg0, **_arg1, &_arg2); end

  # source://frozen_record//lib/frozen_record/scope.rb#100
  def where(criterias = T.unsafe(nil)); end

  # source://frozen_record//lib/frozen_record/scope.rb#108
  def where_not(criterias); end

  protected

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#237
  def array_delegable?(method); end

  # source://frozen_record//lib/frozen_record/scope.rb#161
  def clear_cache!; end

  # source://frozen_record//lib/frozen_record/scope.rb#139
  def comparable_attributes; end

  # source://frozen_record//lib/frozen_record/scope.rb#212
  def compare(record_a, record_b); end

  # source://frozen_record//lib/frozen_record/scope.rb#233
  def delegate_to_class(*args, &block); end

  # source://frozen_record//lib/frozen_record/scope.rb#258
  def limit!(amount); end

  # source://frozen_record//lib/frozen_record/scope.rb#172
  def matching_records; end

  # source://frozen_record//lib/frozen_record/scope.rb#222
  def method_missing(method_name, *args, **_arg2, &block); end

  # source://frozen_record//lib/frozen_record/scope.rb#263
  def offset!(amount); end

  # source://frozen_record//lib/frozen_record/scope.rb#251
  def order!(*ordering); end

  # source://frozen_record//lib/frozen_record/scope.rb#168
  def query_results; end

  # source://frozen_record//lib/frozen_record/scope.rb#150
  def scoping; end

  # source://frozen_record//lib/frozen_record/scope.rb#176
  def select_records(records); end

  # source://frozen_record//lib/frozen_record/scope.rb#204
  def slice_records(records); end

  # source://frozen_record//lib/frozen_record/scope.rb#196
  def sort_records(records); end

  # source://frozen_record//lib/frozen_record/scope.rb#157
  def spawn; end

  # source://frozen_record//lib/frozen_record/scope.rb#241
  def where!(criterias); end

  # source://frozen_record//lib/frozen_record/scope.rb#246
  def where_not!(criterias); end

  private

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#124
  def respond_to_missing?(method_name, *_arg1); end
end

# source://frozen_record//lib/frozen_record/scope.rb#318
class FrozenRecord::Scope::CoverMatcher < FrozenRecord::Scope::Matcher
  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#323
  def match?(other); end

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#319
  def ranged?; end
end

# source://frozen_record//lib/frozen_record/scope.rb#5
FrozenRecord::Scope::DISALLOWED_ARRAY_METHODS = T.let(T.unsafe(nil), Set)

# source://frozen_record//lib/frozen_record/scope.rb#308
class FrozenRecord::Scope::IncludeMatcher < FrozenRecord::Scope::Matcher
  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#313
  def match?(other); end

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#309
  def ranged?; end
end

# source://frozen_record//lib/frozen_record/scope.rb#270
class FrozenRecord::Scope::Matcher
  # @return [Matcher] a new instance of Matcher
  #
  # source://frozen_record//lib/frozen_record/scope.rb#290
  def initialize(value); end

  # source://frozen_record//lib/frozen_record/scope.rb#302
  def ==(other); end

  # source://frozen_record//lib/frozen_record/scope.rb#302
  def eql?(other); end

  # source://frozen_record//lib/frozen_record/scope.rb#286
  def hash; end

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#298
  def match?(other); end

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/scope.rb#294
  def ranged?; end

  # Returns the value of attribute value.
  #
  # source://frozen_record//lib/frozen_record/scope.rb#284
  def value; end

  class << self
    # source://frozen_record//lib/frozen_record/scope.rb#272
    def for(value); end
  end
end

# source://frozen_record//lib/frozen_record/scope.rb#17
class FrozenRecord::Scope::WhereChain
  # @return [WhereChain] a new instance of WhereChain
  #
  # source://frozen_record//lib/frozen_record/scope.rb#18
  def initialize(scope); end

  # source://frozen_record//lib/frozen_record/scope.rb#22
  def not(criterias); end
end

# source://frozen_record//lib/frozen_record/index.rb#52
class FrozenRecord::UniqueIndex < FrozenRecord::Index
  # source://frozen_record//lib/frozen_record/index.rb#68
  def build(records); end

  # source://frozen_record//lib/frozen_record/index.rb#63
  def lookup(value); end

  # source://frozen_record//lib/frozen_record/index.rb#57
  def lookup_multi(values); end

  # @return [Boolean]
  #
  # source://frozen_record//lib/frozen_record/index.rb#53
  def unique?; end
end

# source://frozen_record//lib/frozen_record/version.rb#4
FrozenRecord::VERSION = T.let(T.unsafe(nil), String)
